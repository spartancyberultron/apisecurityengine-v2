const mongoose = require('mongoose');
const Ticket = require('./ticket.model'); // Adjust the path as needed

const llmScanVulnerabilitySchema = new mongoose.Schema({
  llmScan: { 
    type: mongoose.Schema.Types.ObjectId,
    ref: 'LLMScan',
  },   
  probe: {
    type: String, 
  },
  vulnerabilityName: {
    type: String, 
  },
  severity:{
    type: String, 
  },
  owasp: {
    type: [String], 
  },
  cwe: {
    type: [String], 
  },
  description: {
    type: String, 
  },
  iso27001: {
    type: String, 
  },
  nistCSF: {
    type: String, 
  },
  gdpr: {
    type: String, 
  },
  pciDSS: {
    type: String, 
  },
  hipaa: {
    type: String, 
  },
  mitreATT: {
    type: String, 
  },
  nist800: {
    type: String, 
  },
  asvs: {
    type: String, 
  },
  cmmc: {
    type: String, 
  },
  ccpa: {
    type: String, 
  },
  fips: {
    type: String, 
  },
  fisma: {
    type: String, 
  },
  rbiCSF: {
    type: String, 
  },
  remediation:{
    type: String, 
  },
}, {
  timestamps: true,
});

// Middleware to create a ticket after saving an LLMScanVulnerability record
llmScanVulnerabilitySchema.post('save', async function(doc) {
  try {
    // Populate the llmScan reference to access its user and _id
    const scan = await doc.populate('llmScan').execPopulate();

    // Create the ticket
    const ticket = new Ticket({
      title: doc.vulnerabilityName || 'No Title', // Use the vulnerabilityName from LLMScanVulnerability
      description: `${doc.description} OWASP: ${doc.owasp.join(', ')}, CWE: ${doc.cwe.join(', ')}, ISO27001: ${doc.iso27001}, NIST CSF: ${doc.nistCSF}, GDPR: ${doc.gdpr}, PCI DSS: ${doc.pciDSS}, HIPAA: ${doc.hipaa}, MITRE ATT&CK: ${doc.mitreATT}, NIST 800: ${doc.nist800}, ASVS: ${doc.asvs}, CMMC: ${doc.cmmc}, CCPA: ${doc.ccpa}, FIPS: ${doc.fips}, FISMA: ${doc.fisma}, RBI CSF: ${doc.rbiCSF}`,
      source: 'LLM Scan',
      category: 'Security Vulnerability',
      organization: scan.llmScan.user.organization, // Assuming user has an organization field
      scanId: scan.llmScan._id, // Use llmScan._id as the scanId
      status:'OPEN',
      //priority:doc.severity
    });

    // Save the ticket
    await ticket.save();
  } catch (err) {
    console.error('Error creating ticket:', err);
  }
});

const LLMScanVulnerability = mongoose.model('LLMScanVulnerability', llmScanVulnerabilitySchema);

module.exports = LLMScanVulnerability;
