const mongoose = require('mongoose');
const Ticket = require('./ticket.model'); // Adjust the path as needed

const soapOrGraphQLScanVulnerabilitySchema = new mongoose.Schema({
  soapOrGraphQLScan: { 
    type: mongoose.Schema.Types.ObjectId,
    ref: 'SOAPOrGraphQLScan',
    index: true,
  },   
  testCaseCategory: {
    type: String,
  },
  testCaseName: {
    type: String,
  },
  description: {
    type: String,
  },
  exploitability: {
    type: String,
  },
  owasp: {
    type: [String],
  },
  cwe: {
    type: [String],
  }, 
  status: {
    type: String,
  },
  riskAcceptance:{
    type: String, 
  },
  riskAcceptanceReason:{
    type: String, 
  },
  endpoints: {
    type: [String],
  },
  remediation:{
    type: String, 
  },
  severity:{
    type: String, 
  },
}, {
  timestamps: true,
});

// Middleware to create a ticket after saving a SOAPOrGraphQLScanVulnerability record
soapOrGraphQLScanVulnerabilitySchema.post('save', async function(doc) {
  try {
    // Populate the soapOrGraphQLScan reference to determine its type and user
    const scan = await doc
    .populate({
        path: 'soapOrGraphQLScan',          // First level population
        populate: {
            path: 'orgProject',             // Nested population within soapOrGraphQLScan
            populate: {
                path: 'organization'       // Further nested population within orgProject
            }
        }
    })
    .execPopulate(); // Use execPopulate() if needed

    console.log('scannnn:',scan)
    
    // Determine the source based on the scan type
    let source = '';
    if (scan.soapOrGraphQLScan.type === 'soap') {
      source = 'SOAP Scan';
    } else if (scan.soapOrGraphQLScan.type === 'graphql') {
      source = 'GraphQL Scan';
    } else {
      source = 'Unknown Scan'; // Fallback source
    }

    // Create the ticket
    const ticket = new Ticket({
      title: doc.testCaseName || 'No Title', // Fallback title if testCaseName is not provided
      description: `${doc.description} ${doc.owasp.join(', ')} ${doc.cwe.join(', ')}`,
      source: source,
      category: 'Security Vulnerability',
      organization: scan.soapOrGraphQLScan.orgProject.organization, // Assuming user has an organization field
      scanId: scan.soapOrGraphQLScan._id, // Use soapOrGraphQLScan._id as the scanId
      status:'OPEN',
      priority:doc.severity,
      openedBy:scan.soapOrGraphQLScan.orgProject.organization.primaryUser
    });

    // Save the ticket
    await ticket.save();
  } catch (err) {
    console.error('Error creating ticket:', err);
  }
});

const SOAPOrGraphQLScanVulnerability = mongoose.model('SOAPOrGraphQLScanVulnerability', soapOrGraphQLScanVulnerabilitySchema);

module.exports = SOAPOrGraphQLScanVulnerability;
